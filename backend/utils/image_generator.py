import base64
import os
import mimetypes
import time
from google import genai
from google.genai import types
import json
from google.genai.errors import ServerError

class ImageGenerator:

    @staticmethod
    def analyze_image(file_path):
        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

        uploaded_file = client.files.upload(file=file_path)
        model = "gemini-2.0-flash"
        contents = [
            types.Content(
                role="user",
                parts=[
                    types.Part.from_uri(
                        file_uri=uploaded_file.uri,
                        mime_type=uploaded_file.mime_type,
                    ),
                    types.Part.from_text(
                        text="""Analyze the given image and estimate the probability that it was generated by AI.

                        Respond with a single percentage value only.

                        Output format:
                        { \"ai_generated_probability\": XX }

                        Replace XX with the percentage. No extra text, explanations, or contextâ€”only the JSON response."""
                    ),
                ],
            )
        ]

        generate_content_config = types.GenerateContentConfig(response_mime_type="text/plain")
        response_text = ""
        for chunk in client.models.generate_content_stream(
            model=model,
            contents=contents,
            config=generate_content_config,
        ):
            response_text += chunk.text

        try:
            ai_result = json.loads(response_text.strip("```json").strip("```"))
            return ai_result
        except json.JSONDecodeError as e:
            print(f"JSON Decode Error: {e}")
            return {"error": "Failed to analyze the image"}

    @staticmethod
    def save_binary_file(file_name, data):
        with open(file_name, "wb") as f:
            f.write(data)
        return file_name

    @staticmethod
    def generate_image(prompt, max_retries=3, initial_delay=5):
        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))
        model = "gemini-2.0-flash-exp-image-generation"
        contents = [
            types.Content(
                role="user",
                parts=[types.Part.from_text(text=prompt)],
            ),
        ]
        generate_content_config = types.GenerateContentConfig(
            response_modalities=["image", "text"],
            response_mime_type="text/plain",
        )

        for attempt in range(max_retries):
            try:
                for chunk in client.models.generate_content_stream(
                    model=model,
                    contents=contents,
                    config=generate_content_config,
                ):
                    if not chunk.candidates or not chunk.candidates[0].content or not chunk.candidates[0].content.parts:
                        continue
                    if chunk.candidates[0].content.parts[0].inline_data:
                        timestamp = int(time.time())
                        file_name = f"generated_image_{timestamp}"
                        inline_data = chunk.candidates[0].content.parts[0].inline_data
                        file_extension = mimetypes.guess_extension(inline_data.mime_type) or ".png"
                        full_file_name = f"{file_name}{file_extension}"
                        saved_path = ImageGenerator.save_binary_file(full_file_name, inline_data.data)
                        print(f"File of mime type {inline_data.mime_type} saved to: {saved_path}")
                        return saved_path, prompt
                    else:
                        print(chunk.text)
                return None, None

            except ServerError as e:
                if e.status_code == 503:
                    if attempt < max_retries - 1:
                        delay = initial_delay * (2 ** attempt)  # Exponential backoff
                        print(f"503 Error: Model overloaded. Retrying in {delay} seconds... (Attempt {attempt + 1}/{max_retries})")
                        time.sleep(delay)
                        continue
                    else:
                        print(f"503 Error: Model overloaded. Max retries ({max_retries}) exceeded.")
                        return None, None
                else:
                    raise  # Re-raise if it's a different server error

        return None, None

    @staticmethod
    def modify_image(original_prompt, modification_prompt):
        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))
        combined_prompt = f"{original_prompt} {modification_prompt}"
        
        model = "gemini-2.0-flash-exp-image-generation"
        contents = [
            types.Content(
                role="user",
                parts=[types.Part.from_text(text=combined_prompt)],
            )
        ]
        generate_content_config = types.GenerateContentConfig(
            response_modalities=["image", "text"],
            response_mime_type="text/plain",
        )

        for chunk in client.models.generate_content_stream(
            model=model,
            contents=contents,
            config=generate_content_config,
        ):
            if not chunk.candidates or not chunk.candidates[0].content or not chunk.candidates[0].content.parts:
                continue
            if chunk.candidates[0].content.parts[0].inline_data:
                timestamp = int(time.time())
                file_name = f"modified_image_{timestamp}"
                inline_data = chunk.candidates[0].content.parts[0].inline_data
                file_extension = mimetypes.guess_extension(inline_data.mime_type) or ".png"
                full_file_name = f"{file_name}{file_extension}"
                saved_path = ImageGenerator.save_binary_file(full_file_name, inline_data.data)
                print(f"Modified file saved to: {saved_path}")
                return saved_path, combined_prompt
            else:
                print(chunk.text)
        return None, None

    @staticmethod
    def generate_story(story_prompt, num_images):
        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))
        model = "gemini-2.0-flash-exp-image-generation"
        contents = [
            types.Content(
                role="user",
                parts=[
                    types.Part.from_text(
                        text=f"Generate a story about {story_prompt}. Start with a brief introduction, "
                             f"then provide exactly {num_images} numbered scenes. Each scene should be a concise "
                             "paragraph suitable for generating an image. "
                             "For each scene, generate an image. Format the output as:\n"
                             "Introduction: [text]\n"
                             "Scene 1: [text]\n"
                             "Scene 2: [text]\n"
                             "..."
                    ),
                ],
            ),
        ]
        generate_content_config = types.GenerateContentConfig(
            response_modalities=["image", "text"],
            response_mime_type="text/plain",
        )

        story_text = ""
        image_paths = []
        for chunk in client.models.generate_content_stream(
            model=model,
            contents=contents,
            config=generate_content_config,
        ):
            if not chunk.candidates or not chunk.candidates[0].content or not chunk.candidates[0].content.parts:
                continue
            part = chunk.candidates[0].content.parts[0]
            if part.inline_data:
                timestamp = int(time.time())
                file_name = f"story_image_{timestamp}"
                inline_data = part.inline_data
                file_extension = mimetypes.guess_extension(inline_data.mime_type) or ".png"
                full_file_name = f"{file_name}{file_extension}"
                saved_path = ImageGenerator.save_binary_file(full_file_name, inline_data.data)
                print(f"Story image of mime type {inline_data.mime_type} saved to: {saved_path}")
                image_paths.append(saved_path)
            elif part.text:
                story_text += part.text

        print(f"Debug: Raw story text:\n{story_text}")
        print(f"Debug: Image paths: {image_paths}")

        lines = story_text.strip().split('\n')
        introduction = ""
        scenes = []
        current_scene = ""

        for line in lines:
            line = line.strip()
            if not line:
                continue
            if line.startswith("Introduction:"):
                introduction = line.replace("Introduction:", "").strip()
            elif line.startswith("Scene"):
                if current_scene:
                    scenes.append(current_scene)
                current_scene = line
            elif current_scene:
                current_scene += " " + line

        if current_scene:
            scenes.append(current_scene)

        print(f"Debug: Parsed scenes: {scenes}")

        scenes = scenes[:num_images]
        image_paths = image_paths[:num_images]

        story_result = {'introduction': introduction, 'scenes': []}
        for i, scene in enumerate(scenes):
            scene_text = scene.split(':', 1)[1].strip() if ':' in scene else scene
            image_path = image_paths[i] if i < len(image_paths) else None
            story_result['scenes'].append({
                'text': scene_text,
                'path': image_path,
                'prompt': f"{scene_text}"
            })

        return story_result

if __name__ == "__main__":
    if "GEMINI_API_KEY" not in os.environ:
        print("Error: GEMINI_API_KEY environment variable not set")
    else:
        # Note: The error occurred in generate_image, but your main calls generate_story.
        # Fixing the call to match the traceback:
        # story_result = ImageGenerator.generate_story(
        #     "a white baby goat going on an adventure in a farm in a 3d cartoon animation style",
        #     3
        # )
        # For the traceback, it seems you might have changed it to generate_image, so let's fix that:
        image_path, prompt = ImageGenerator.generate_image(
            "a white baby goat on a farm in a 3d cartoon animation style"
        )
        if image_path:
            print(f"Generated Image: {image_path}")
        else:
            print("Failed to generate image")